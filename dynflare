#!/usr/bin/env python

# imports
import argparse, os, sys, CloudFlare
from dnslib import DNSRecord
from publicsuffix2 import PublicSuffixList
from datetime import datetime, tzinfo, timedelta

try:
  from configparser import ConfigParser, NoOptionError
  from io import StringIO
except ImportError: # Python 2 fallback
  from ConfigParser import SafeConfigParser as ConfigParser
  from ConfigParser import NoOptionError
  from cStringIO import StringIO

# classes
# there's no datetime.timezone until Python 3.2
class UTC(tzinfo):
  '''UTC'''
  def utcoffset(self, dt):
    return timedelta(0)

  def tzname(self, dt):
    return 'UTC'

  def dst(self, dt):
    return timedelta(0)

# functions
def timestamp():
  return datetime.now(UTC()).ctime()

def my_ip():
  hostname = 'myip.opendns.com'
  server = 'resolver1.opendns.com'

  question = DNSRecord.question(hostname).send(server)
  return DNSRecord.parse(question).short()

def zone_id(cf, domain):
  # query for the zone name and expect only one value back
  try:
    zones = cf.zones.get(params = {'name': domain, 'per_page': 1})
  except CloudFlare.exceptions.CloudFlareAPIError as e:
    sys.exit('[%s] /zones.get %d %s - api call failed' % (timestamp(), e, e))
  except Exception as e:
    sys.exit('[%s] /zones.get - %s - api call failed' % (timestamp(), e))

  if len(zones) == 0:
    sys.exit('[%s] No zones found' % (timestamp()))

  # extract the zone_id which is needed to process that zone
  zone = zones[0]
  return zone['id']

def record_info(cf, zid, host):
  record_info = cf.zones.dns_records.get(zid, params = {'name': host, 'type': 'A'})
  return record_info[0]

def create_dns_record(cf, zid, host, ip):
  cf.zones.dns_records.post(zid, data = {'type': 'A', 'name': host, 'content': ip, 'ttl': 120})
  print('[%s] Created %s with content %s' % (timestamp(), host, ip))

def update_dns_record(cf, zid, rid, host, ip):
  cf.zones.dns_records.put(zid, rid, data = {'type': 'A', 'name': host, 'content': ip, 'ttl': 120})
  print('[%s] Updated %s with content %s' % (timestamp(), host, ip))

def upsert_dns_record(psl, cf, host):
  ip = my_ip()
  domain = psl.get_public_suffix(host)
  zid = zone_id(cf, domain)

  try:
    rinf = record_info(cf, zid, host)
    if rinf['content'] != ip:
      update_dns_record(cf, zid, rinf['id'], host, ip)
    else:
      print('[%s] Host %s is already up to date with %s' % (timestamp(), host, ip))
  except IndexError:
    create_dns_record(cf, zid, host, ip)

# arguments
parser = argparse.ArgumentParser(
  description = '''
    Dynamic DNS script for updating a record with your machine's public IP address.
    Supports Cloudflare DNS hosted zones.
  ''',
  epilog = '''
    EMAIL and API_KEY may be read from environment as CLOUDFLARE_EMAIL and
    CLOUDFLARE_API_KEY. They need to be specified as arguments only
    when the environment variables are undefined or when they need to be
    overridden.
  '''
)
parser.add_argument(
  '--host',
  dest = 'host',
  type = str,
  help = 'DNS hostname to update.',
  required = True
)
parser.add_argument(
  '--email',
  dest = 'email',
  type = str,
  help = 'Cloudflare email address. Only required for global API key.'
)
parser.add_argument(
  '--api-key',
  dest = 'api_key',
  type = str,
  help = 'Cloudflare API key or API token.'
)
parser.add_argument(
  '--conf',
  dest = 'conf',
  type = str,
  help = ('Configuration file containing email + key or token using same syntax as '
  'the Certbot Cloudflare plug-in.')
)
args = parser.parse_args()

# implementation
if args.conf:
  cfg = ConfigParser()
  with open(os.path.expanduser(args.conf)) as stream:
    # workaround ConfigParser's deficiency
    stream = StringIO(u'[default]\n' + stream.read())
    try:
      cfg.read_file(stream)
    except AttributeError: # Python 2 fallback
      cfg.readfp(stream)
  try:
    os.environ['CLOUDFLARE_API_KEY'] = cfg.get('default', 'dns_cloudflare_api_token')
  except NoOptionError:
    try:
      os.environ['CLOUDFLARE_EMAIL'] = cfg.get('default', 'dns_cloudflare_email')
      os.environ['CLOUDFLARE_API_KEY'] = cfg.get('default', 'dns_cloudflare_api_key')
    except NoOptionError:
      sys.exit('Fatal: invalid config file. Expecting email + key or token!')

email = os.environ.get('CLOUDFLARE_EMAIL')
email = args.email if type(args.email) is not type(None) else email

if type(email) is not type(None):
  os.environ['CLOUDFLARE_EMAIL'] = email

api_key = os.environ.get('CLOUDFLARE_API_KEY')
api_key = args.api_key if type(args.api_key) is not type(None) else api_key

if type(api_key) is type(None):
  sys.exit('Fatal: you must specify at least an API token!')

os.environ['CLOUDFLARE_API_KEY'] = api_key

upsert_dns_record(PublicSuffixList(), CloudFlare.CloudFlare(), args.host)
